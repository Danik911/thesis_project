[project]
name = "thesis-project"
version = "0.1.0"
description = "Thesis project with integrated PRP framework"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Core LlamaIndex components
    "llama-index-core>=0.11.0",
    "llama-index>=0.11.0",
    # LlamaIndex integrations that are available for Python 3.12
    "llama-index-llms-openai>=0.3.0",
    "llama-index-embeddings-openai>=0.2.0",
    "llama-index-readers-file>=0.2.0",
    "llama-index-vector-stores-faiss>=0.2.0",
    "llama-index-llms-perplexity>=0.2.0",
    "llama-index-readers-web>=0.2.0",
    # ChromaDB integration
    "chromadb>=0.4.22",
    "llama-index-vector-stores-chroma>=0.3.0",
    # OpenAI client
    "openai>=1.12.0",
    # Vector database support
    "faiss-cpu>=1.7.4",
    # Core Python dependencies
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.1",
    # Document processing and formatting
    "markdown>=3.5.0",
    "PyPDF2>=3.0.1",
    "pdfplumber>=0.10.0",
    # HTTP and web search capabilities
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    # Data processing
    "numpy<2.0",
    "pandas>=2.0.0",
    # Statistical analysis
    "scipy>=1.11.0",
    # Visualization and dashboards
    "plotly>=5.15.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "networkx>=3.1.0",
    # Observability and monitoring
    "arize-phoenix>=4.0.0",
    "opentelemetry-sdk>=1.24.0",
    "opentelemetry-exporter-otlp>=1.24.0",
    "opentelemetry-instrumentation>=0.45b0",
    # OpenInference instrumentation
    "openinference-instrumentation-llama-index>=2.0.0",
    "openinference-instrumentation-openai>=0.1.30",
    # "openinference-instrumentation-chromadb>=0.1.12",  # Package not available - using custom instrumentation
    "openinference-semantic-conventions>=0.1.9",
    # Token counting for cost monitoring
    "tiktoken>=0.5.0",
    "nest-asyncio>=1.6.0",
    "llama-index-callbacks-arize-phoenix>=0.5.1",
    "opentelemetry-api>=1.35.0",
    "opentelemetry-exporter-otlp-proto-http>=1.35.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["main/src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "COM812", "ISC001"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["main/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
